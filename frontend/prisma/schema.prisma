generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 1. ユーザーモデル
// ユーザー認証と基本情報を管理します。
model User {
  id        String   @id @default(uuid())
  clerkUserId String @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション：一人のユーザーは複数の企業情報を持つ
  companies Company[]
  stories Story[]
  esStocks EsStock[]
  Interview Interview[]
}


// 2. 企業モデル
// 全ての情報のハブとなります。ユーザーに紐づきます。
model Company {
  id          String    @id @default(cuid())
  name        String    // 企業名
  logoUrl     String?   // 企業ロゴURL
  hpUrl       String?   // 企業HPURL
  mypageUrl   String?   // 企業マイページURL
  note        String?   // 企業に関する自由なメモ
  industry    String?   // 企業の業界
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // リレーション：どのユーザーが登録した企業か
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // リレーション：一つの企業は複数の選考を持つ
  selections  Selection[]
}

// 3. 選考カードモデル
// インターンや本選考など、個別の選考プロセスを管理します。
model Selection {
  id          String         @id @default(cuid())
  name        String         // 選考名
  type        SelectionType  // 選考タイプ（インターン or 本選考）
  status      Status         @default(APPLIED) // カンバンボードのレーンに対応するステータス
  note        String?        // この選考に関するメモ
  esText      String?        // この選考に提出したESのテキスト
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // リレーション：どの企業に紐づく選考か
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // リレーション：一つの選考は複数のスケジュールを持つ
  schedules   Schedule[]
  submittedEs SubmittedEs[]
}

// 4. スケジュールモデル
// ES締切や面接日など、日付に関わる情報を管理します。
model Schedule {
  id          String        @id @default(cuid())
  title       String        // 例：「一次面接」「ES提出締切」
  startDate   DateTime      // 予定の開始日時
  startTime   String?       // 予定の開始時間
  endDate     DateTime     // 予定の終了日時
  endTime     String?       // 予定の終了時間
  isConfirmed Boolean       @default(true) // 確定 or 未確定フラグ
  location    String?       // 場所
  url         String?       // スケジュールのURL
  note        String?       // スケジュールに関するメモ
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // リレーション：どの選考に紐づくスケジュールか
  selectionId String
  selection   Selection     @relation(fields: [selectionId], references: [id], onDelete: Cascade)
}

model Story {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String   // 経験のタイトル (例:「大学祭実行委員でのリーダー経験」)

  // STARメソッドを意識した構造化データ
  situation String  // (S) 状況・背景
  task      String  // (T) 課題・目標
  action    String  // (A) 具体的にとった行動
  result    String  // (R) 行動によって得られた結果・学び

  // 自由記述
  learned   String?  // この経験から得た学びやスキルのメモ

  // リレーション
  esStocks  EsStock[]
}

model EsStock {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id]) // Storyとは別にUserにも紐づける

  title     String   // 文章のタイトル (例:「リーダー経験」)
  content   String   // 文章の本文

  // リレーション
  baseStoryId String?  // どのStoryを元にしたか (任意)
  baseStory   Story?   @relation(fields: [baseStoryId], references: [id])

  submittedEs SubmittedEs[] // このストックがどの提出物に使われたか
}

model SubmittedEs {
  id            String   @id @default(cuid())
  selectionId   String
  selection     Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)

  question      String   // 企業からの設問
  answer        String   // 実際に提出した回答文

  // リレーション
  baseStockId   String?  // どのEsStockを元にしたか (任意)
  baseStock     EsStock? @relation(fields: [baseStockId], references: [id])
}

// Enum: 選考タイプを定義
enum SelectionType {
  INTERNSHIP // インターンシップ
  FULLTIME   // 本選考
}

// Enum: カンバンボードのステータスを定義
enum Status {
  INTERESTED  // 興味あり
  APPLIED     // 応募済み
  ES_SUBMITTED // ES提出済み
  WEBTEST     // Webテスト
  INTERVIEW_1 // 一次面接
  INTERVIEW_2 // 二次面接
  INTERVIEW_3 // 三次面接以降
  FINAL       // 最終面接
  OFFERED     // 内定
  REJECTED    // お祈り
}

model Interview {
  id        String   @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName String
  companyURL String
  companyResearch String
  UserES String
  Question String @default("")
  createdAt DateTime @default(now())
  InterviewAnswer InterviewAnswer[]
}

model InterviewAnswer {
  id        String   @id @default(cuid())
  interviewId String
  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  question String
  answer String
  totalScore Int
  specificityScore Int
  logicScore Int
  starStructureScore Int
  companyFitScore Int
  growthScore Int
  feedback String
  followUpQuestion String?
  createdAt DateTime @default(now())
}